package cfcc.com.shouChi.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BAO_CUN".
*/
public class BaoCunDao extends AbstractDao<BaoCun, Void> {

    public static final String TABLENAME = "BAO_CUN";

    /**
     * Properties of entity BaoCun.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Sbinlogicalid = new Property(0, String.class, "sbinlogicalid", false, "SBINLOGICALID");
        public final static Property Scashclasscode = new Property(1, String.class, "scashclasscode", false, "SCASHCLASSCODE");
        public final static Property Sorderkind = new Property(2, String.class, "sorderkind", false, "SORDERKIND");
        public final static Property Scashclassname = new Property(3, String.class, "scashclassname", false, "SCASHCLASSNAME");
        public final static Property Bizhongshuxing = new Property(4, String.class, "bizhongshuxing", false, "BIZHONGSHUXING");
        public final static Property Sorderno = new Property(5, String.class, "sorderno", false, "SORDERNO");
    }


    public BaoCunDao(DaoConfig config) {
        super(config);
    }
    
    public BaoCunDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BAO_CUN\" (" + //
                "\"SBINLOGICALID\" TEXT," + // 0: sbinlogicalid
                "\"SCASHCLASSCODE\" TEXT," + // 1: scashclasscode
                "\"SORDERKIND\" TEXT," + // 2: sorderkind
                "\"SCASHCLASSNAME\" TEXT," + // 3: scashclassname
                "\"BIZHONGSHUXING\" TEXT," + // 4: bizhongshuxing
                "\"SORDERNO\" TEXT);"); // 5: sorderno
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BAO_CUN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BaoCun entity) {
        stmt.clearBindings();
 
        String sbinlogicalid = entity.getSbinlogicalid();
        if (sbinlogicalid != null) {
            stmt.bindString(1, sbinlogicalid);
        }
 
        String scashclasscode = entity.getScashclasscode();
        if (scashclasscode != null) {
            stmt.bindString(2, scashclasscode);
        }
 
        String sorderkind = entity.getSorderkind();
        if (sorderkind != null) {
            stmt.bindString(3, sorderkind);
        }
 
        String scashclassname = entity.getScashclassname();
        if (scashclassname != null) {
            stmt.bindString(4, scashclassname);
        }
 
        String bizhongshuxing = entity.getBizhongshuxing();
        if (bizhongshuxing != null) {
            stmt.bindString(5, bizhongshuxing);
        }
 
        String sorderno = entity.getSorderno();
        if (sorderno != null) {
            stmt.bindString(6, sorderno);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BaoCun entity) {
        stmt.clearBindings();
 
        String sbinlogicalid = entity.getSbinlogicalid();
        if (sbinlogicalid != null) {
            stmt.bindString(1, sbinlogicalid);
        }
 
        String scashclasscode = entity.getScashclasscode();
        if (scashclasscode != null) {
            stmt.bindString(2, scashclasscode);
        }
 
        String sorderkind = entity.getSorderkind();
        if (sorderkind != null) {
            stmt.bindString(3, sorderkind);
        }
 
        String scashclassname = entity.getScashclassname();
        if (scashclassname != null) {
            stmt.bindString(4, scashclassname);
        }
 
        String bizhongshuxing = entity.getBizhongshuxing();
        if (bizhongshuxing != null) {
            stmt.bindString(5, bizhongshuxing);
        }
 
        String sorderno = entity.getSorderno();
        if (sorderno != null) {
            stmt.bindString(6, sorderno);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BaoCun readEntity(Cursor cursor, int offset) {
        BaoCun entity = new BaoCun( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sbinlogicalid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // scashclasscode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sorderkind
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // scashclassname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bizhongshuxing
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // sorderno
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BaoCun entity, int offset) {
        entity.setSbinlogicalid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setScashclasscode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSorderkind(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setScashclassname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBizhongshuxing(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSorderno(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BaoCun entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BaoCun entity) {
        return null;
    }

    @Override
    public boolean hasKey(BaoCun entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
