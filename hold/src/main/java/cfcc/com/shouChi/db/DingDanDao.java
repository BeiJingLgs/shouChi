package cfcc.com.shouChi.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DING_DAN".
*/
public class DingDanDao extends AbstractDao<DingDan, Void> {

    public static final String TABLENAME = "DING_DAN";

    /**
     * Properties of entity DingDan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Sorderno = new Property(0, String.class, "sorderno", false, "SORDERNO");
        public final static Property Mingcheng = new Property(1, String.class, "mingcheng", false, "MINGCHENG");
        public final static Property Dprocessdate = new Property(2, String.class, "dprocessdate", false, "DPROCESSDATE");
        public final static Property Ftotalsum = new Property(3, String.class, "ftotalsum", false, "FTOTALSUM");
        public final static Property Excutedate = new Property(4, String.class, "excutedate", false, "EXCUTEDATE");
        public final static Property Sorderbank = new Property(5, String.class, "sorderbank", false, "SORDERBANK");
    }


    public DingDanDao(DaoConfig config) {
        super(config);
    }
    
    public DingDanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DING_DAN\" (" + //
                "\"SORDERNO\" TEXT," + // 0: sorderno
                "\"MINGCHENG\" TEXT," + // 1: mingcheng
                "\"DPROCESSDATE\" TEXT," + // 2: dprocessdate
                "\"FTOTALSUM\" TEXT," + // 3: ftotalsum
                "\"EXCUTEDATE\" TEXT," + // 4: excutedate
                "\"SORDERBANK\" TEXT);"); // 5: sorderbank
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DING_DAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DingDan entity) {
        stmt.clearBindings();
 
        String sorderno = entity.getSorderno();
        if (sorderno != null) {
            stmt.bindString(1, sorderno);
        }
 
        String mingcheng = entity.getMingcheng();
        if (mingcheng != null) {
            stmt.bindString(2, mingcheng);
        }
 
        String dprocessdate = entity.getDprocessdate();
        if (dprocessdate != null) {
            stmt.bindString(3, dprocessdate);
        }
 
        String ftotalsum = entity.getFtotalsum();
        if (ftotalsum != null) {
            stmt.bindString(4, ftotalsum);
        }
 
        String excutedate = entity.getExcutedate();
        if (excutedate != null) {
            stmt.bindString(5, excutedate);
        }
 
        String sorderbank = entity.getSorderbank();
        if (sorderbank != null) {
            stmt.bindString(6, sorderbank);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DingDan entity) {
        stmt.clearBindings();
 
        String sorderno = entity.getSorderno();
        if (sorderno != null) {
            stmt.bindString(1, sorderno);
        }
 
        String mingcheng = entity.getMingcheng();
        if (mingcheng != null) {
            stmt.bindString(2, mingcheng);
        }
 
        String dprocessdate = entity.getDprocessdate();
        if (dprocessdate != null) {
            stmt.bindString(3, dprocessdate);
        }
 
        String ftotalsum = entity.getFtotalsum();
        if (ftotalsum != null) {
            stmt.bindString(4, ftotalsum);
        }
 
        String excutedate = entity.getExcutedate();
        if (excutedate != null) {
            stmt.bindString(5, excutedate);
        }
 
        String sorderbank = entity.getSorderbank();
        if (sorderbank != null) {
            stmt.bindString(6, sorderbank);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public DingDan readEntity(Cursor cursor, int offset) {
        DingDan entity = new DingDan( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sorderno
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mingcheng
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dprocessdate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ftotalsum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // excutedate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // sorderbank
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DingDan entity, int offset) {
        entity.setSorderno(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMingcheng(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDprocessdate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFtotalsum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExcutedate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSorderbank(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(DingDan entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(DingDan entity) {
        return null;
    }

    @Override
    public boolean hasKey(DingDan entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
