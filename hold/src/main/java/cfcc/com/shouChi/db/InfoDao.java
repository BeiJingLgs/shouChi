package cfcc.com.shouChi.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INFO".
*/
public class InfoDao extends AbstractDao<Info, Void> {

    public static final String TABLENAME = "INFO";

    /**
     * Properties of entity Info.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Sbankcode = new Property(0, String.class, "sbankcode", false, "SBANKCODE");
        public final static Property Sbankname = new Property(1, String.class, "sbankname", false, "SBANKNAME");
        public final static Property Ilevel = new Property(2, String.class, "ilevel", false, "ILEVEL");
        public final static Property Sparentbankcode = new Property(3, String.class, "sparentbankcode", false, "SPARENTBANKCODE");
    }


    public InfoDao(DaoConfig config) {
        super(config);
    }
    
    public InfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INFO\" (" + //
                "\"SBANKCODE\" TEXT," + // 0: sbankcode
                "\"SBANKNAME\" TEXT," + // 1: sbankname
                "\"ILEVEL\" TEXT," + // 2: ilevel
                "\"SPARENTBANKCODE\" TEXT);"); // 3: sparentbankcode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Info entity) {
        stmt.clearBindings();
 
        String sbankcode = entity.getSbankcode();
        if (sbankcode != null) {
            stmt.bindString(1, sbankcode);
        }
 
        String sbankname = entity.getSbankname();
        if (sbankname != null) {
            stmt.bindString(2, sbankname);
        }
 
        String ilevel = entity.getIlevel();
        if (ilevel != null) {
            stmt.bindString(3, ilevel);
        }
 
        String sparentbankcode = entity.getSparentbankcode();
        if (sparentbankcode != null) {
            stmt.bindString(4, sparentbankcode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Info entity) {
        stmt.clearBindings();
 
        String sbankcode = entity.getSbankcode();
        if (sbankcode != null) {
            stmt.bindString(1, sbankcode);
        }
 
        String sbankname = entity.getSbankname();
        if (sbankname != null) {
            stmt.bindString(2, sbankname);
        }
 
        String ilevel = entity.getIlevel();
        if (ilevel != null) {
            stmt.bindString(3, ilevel);
        }
 
        String sparentbankcode = entity.getSparentbankcode();
        if (sparentbankcode != null) {
            stmt.bindString(4, sparentbankcode);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Info readEntity(Cursor cursor, int offset) {
        Info entity = new Info( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sbankcode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sbankname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ilevel
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // sparentbankcode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Info entity, int offset) {
        entity.setSbankcode(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSbankname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIlevel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSparentbankcode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Info entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Info entity) {
        return null;
    }

    @Override
    public boolean hasKey(Info entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
